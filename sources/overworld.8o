:const player_shift			8
:const neg_player_shift		-8

: overworld_start
	map_render
	player_draw

	i := first_run
	load v0 - v0
	if v0 != 0 begin
		v0 := 0
		save v0 - v0
		game_save
	end

	i := exit_main
	v0 := 0
	save v0 - v0

	check_objects

	loop
		v0 := OCTO_KEY_W
		if v0 key then
			move_up

		v0 := OCTO_KEY_A
		if v0 key then
			move_left

		v0 := OCTO_KEY_S
		if v0 key then
			move_down

		v0 := OCTO_KEY_D
		if v0 key then
			move_right

		i := exit_main
		load v0 - v0
	if v0 == 0 then again
	return

:const player_dir_front 0
:const player_dir_left 1
:const player_dir_right 2
:const player_dir_back 3

: load_player_pos
	i := player_pos
	load va - vb
	return

: save_player_pos
	i := player_pos
	save va - vb
	return

: player_dir
	:byte player_dir_front

: player_set_dir_v0
	i := player_dir
	save v0 - v0
	return

: player_draw
	load_player_pos
	i := player_dir
	load v0 - v0
	i := long tile_player_front_data
	v1 := 64
: player_draw_next_tile
	if v0 == 0 then
		jump player_draw_sprite
	i += v1
	v0 += -1
	jump player_draw_next_tile
: player_draw_sprite
	sprite va vb 0
	return

: save_door
	i := door_pos
	save v1 - v5
	return

: save_battle
	i := battle_pos
	save v1 - v3
	return

: save_power_up
	i := power_pos
	save v1 - v3
	return

: draw_battle_robot
	i := long tile_robot_engineer_front_data
	sprite v1 v2 0
	return

: draw_power_up
	i := long tile_power_up_data
	sprite v1 v2 0
	return

: move_sfx
	va := sfx_index_move
	jump sfx_play_sync

: check_door
	i := door_pos
	load v1 - v5
	if v1 != 0 then
		if v2 != 0 begin
			i := player_pos
			load vc - vd
			if vc >= v1 begin
				if vc <= v1 begin
					v2 += 16
					if vb >= v2 begin
						if vb <= v2 begin
							i := player_door_pos
							save v4 - v5
							v0 := v3
							map_scroll_to
							check_objects
							i := player_door_pos
							load va - vb
							i := player_pos
							save va - vb
						end
					end
				end
			end
		end
	return


: hit_test_objects
	i := workaround_store
	save v0 - v0
	i := battle_pos
	load v1 - v3
	v5 := 0

	: hit_test_impl
	if v1 != 0xff then
		if v2 != 0xff begin
			i := player_pos
			load vc - vd
			vc += 8
			vd += 8
			if vc >= v1 begin
				v1 += 16
				if vc <= v1 begin
					if vd >= v2 begin
						v2 += 16
						if vd <= v2 begin
							if v5 == 0 begin
								i := battle_pos
								load v1 - v3
								draw_battle_robot

								i := battle_obj_id
								v1 := 0xff
								v2 := 0xff
								save_battle

								i := exit_main
								v0 := 1
								save v0 - v0
								i := current_battle
								save v3 - v3
								va := overlay_battle
								set_current_overlay
							else
								i := power_pos
								load v1 - v3
								draw_power_up
								v1 := 0xff
								v2 := 0xff
								save_power_up

								va := v3
								add_skillpoint
								game_save
							end
						end
					end
				end
			end
		end

	if v5 == 1 then jump hit_test_end

	i := power_pos
	load v1 - v3
	v5 := 1
	jump hit_test_impl

	: hit_test_end
	i := workaround_store
	load v0 - v0
	return


: check_objects_advance_v6
	i := map_current_objects_ptr
	load v7 - v8
	v8 += v6
	v7 += vf
	save v7 - v8
	return

: check_objects
	map_get_screen_index
	i := long map_object_data
	i += v0
	load v0 - v1
	i := map_current_objects_ptr
	save v0 - v1

	v1 := 0xff
	v2 := 0xff
	save_battle
	save_door
	save_power_up

	vb := 0

: check_objects_loop
	0xf0 0x00
: map_current_objects_ptr
	0 0
	load v0 - v5
	if v0 == 0x00 then
		return

	if v0 == 0x01 begin
		# battle
		v6 := 4
		check_objects_advance_v6
		draw_battle_robot
		save_battle
		i := battle_obj_id
		save vb - vb
	else
		if v0 == 0x03 begin
			v6 := 6
			check_objects_advance_v6
			# door
			save_door
		else
			if v0 == 0x02 begin
				v6 := 4
				check_objects_advance_v6
				# powerup
				draw_power_up
				save_power_up
				i := power_obj_id
				save vb - vb
			else
				v6 := 4
				check_objects_advance_v6
			end
		end
	end
	jump check_objects_loop


: move_right
	load_player_pos
	player_draw
	if va >= 112 begin
		i := player_y
		save vb - vb
		map_scroll_right
		check_objects
		i := player_y
		load vb - vb
		va := 0
	else
		i := player_pos
		save va - vb
		va += 12
		vb += 12
		map_is_wall
		hit_test_objects
		i := player_pos
		load va - vb
		if v0 == 0 then va += player_shift
	end
	save_player_pos
	v0 := player_dir_right
	player_set_dir_v0
	player_draw
	jump move_sfx


: move_left
	load_player_pos
	player_draw
	if va <= 0 begin
		i := player_y
		save vb - vb
		map_scroll_left
		check_objects
		i := player_y
		load vb - vb
		va := 112
	else
		i := player_pos
		save va - vb
		vb += 12
		map_is_wall
		hit_test_objects
		vb += -12
		i := player_pos
		load va - vb
		if v0 == 0 then va += neg_player_shift
		check_door
	end
	save_player_pos
	v0 := player_dir_left
	player_set_dir_v0
	player_draw
	jump move_sfx


: move_down
	load_player_pos
	player_draw
	if vb >= 44 begin
		i := player_x
		save va - va
		map_scroll_down
		check_objects
		i := player_x
		load va - va
		vb := 0
	else
		i := player_pos
		save va - vb
		vb += 16
		map_is_wall
		hit_test_objects
		vb += -16
		i := player_pos
		load va - vb
		if v0 == 0 then vb += player_shift
	end
	save_player_pos
	v0 := player_dir_front
	player_set_dir_v0
	player_draw
	jump move_sfx


: move_up
	load_player_pos
	player_draw
	if vb <= 0 begin
		i := player_x
		save va - va
		map_scroll_up
		check_objects
		i := player_x
		load va - va
		vb := 48
	else
		i := player_pos
		save va - vb
		vb += 10
		map_is_wall
		hit_test_objects
		vb += -10
		i := player_pos
		load va - vb
		if v0 == 0 then vb += neg_player_shift
	end
	save_player_pos
	v0 := player_dir_back
	player_set_dir_v0
	player_draw
	jump move_sfx

: exit_main 0x00
: battle_pos 0xff 0xff 0x00
: door_pos 0xff 0xff 0x00 0x00 0x00
: power_pos 0x00 0x00 0x00
: player_door_pos 0x00 0x00
: battle_obj_id 0x00
: power_obj_id 0x00
: workaround_store 0x00
