:const lz4_buffer_hi 0x40
:const lz4_buffer_lo 0x00

: lz4_unpack
	i := lz4_read_pos
	save va - vb

	v0 := lz4_buffer_hi
	v1 := lz4_buffer_lo

	i := lz4_write_pos
	save v0 - v1

	vd += v1
	vc += vf
	vc += v0 #update end pointer
	v9 := 1 #const 1

: lz4_unpack_next
# read next token
	lz4_read_byte

	v1 := 0xf

	v7 := v0
	v7 &= v1

	v0 >>= v0
	v0 >>= v0
	v0 >>= v0
	v0 >>= v0
	v5 := v0
	v5 &= v1

	if v5 == 0 then
		jump lz4_match_copy

	v6 := 0
	v5 += -1 #all loops below will break if underflow happened, 0 -> -1
	if v5 == 14 begin #15 actually
		loop
			lz4_read_byte
			v5 += v0
			v6 += vf
			if v0 == 255 then
		again
	end

	loop
		lz4_read_byte
		lz4_write_byte

		v5 -= v9
		v6 += vf
		v6 -= v9

		if vf != 0 then
	again

: lz4_match_copy
	v5 := v7
	v5 += 3 #4 - minimal match length -1, loop will exit on undeflow, 0 -> -1
	v6 := 0

	lz4_read_byte #add lz4_read_word
	v8 := v0
	lz4_read_byte
	v7 := v0

	if v5 == 18 begin # 0x0f from token + 4 - 1 = 18
		loop
			lz4_read_byte
			v5 += v0
			v6 += vf
			if v0 == 255 then
		again
	end

	i := lz4_write_pos
	load v0 - v1

	v1 -= v8 #sub offset from dst pointer
	v0 += vf
	v0 += -1
	v0 -= v7

	i := lz4_match_pos
	save v0 - v1

	loop
		lz4_read_match_byte
		lz4_write_byte
		#:breakpoint MATCH

		v5 -= v9
		v6 += vf
		v6 -= v9

		if vf != 0 then
	again

	i := lz4_write_pos
	load v0 - v1
	#:breakpoint DONE
	if v0 < vc
		then jump lz4_unpack_next

	if v1 < vd
		then jump lz4_unpack_next

	return

: lz4_read_byte
	0xf0 0x00
: lz4_read_pos
	0 0
	load v0 - v0

	i := lz4_read_pos

: lz4_inc_16
	load v1 - v2
	v2 += v9
	v1 += vf
	save v1 - v2
	return

: lz4_write_byte
	0xf0 0x00
: lz4_write_pos
	0 0

	save v0 - v0

	i := lz4_write_pos
	jump lz4_inc_16

: lz4_copy_byte
	lz4_read_byte
	jump lz4_write_byte

: lz4_read_match_byte
	0xf0 0x00
: lz4_match_pos
	0 0
	load v0 - v0

	i := lz4_match_pos
	jump lz4_inc_16
