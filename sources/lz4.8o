: lz4_unpack
	i := lz4_read_pos
	save va - vb

# read next token
	lz4_read_byte

	v1 := 0xf

	v5 := v0
	v5 &= v1

	v0 >>= v0
	v0 >>= v0
	v0 >>= v0
	v0 >>= v0
	v7 := v0
	v7 &= v1

	if v5 == 0 then
		jump lz4_no_copy

	v6 := 0
	if v5 == 15 begin
		loop
			lz4_read_byte
			v5 += v0
			v6 += vf
			if v0 == 255 then
		again
	end

	loop
		lz4_read_byte
		lz4_write_byte
	:breakpoint LITERAL
		v0 := 1
		v5 -= v0
		v0 -= vf
		v6 -= v0
		v0 := v5
		v0 |= v6
		if v0 != 0 then
	again

: lz4_no_copy
	return

: lz4_read_byte
	0xf0 0x00
: lz4_read_pos
	0 0
	load v0 - v0

	i := lz4_read_pos

: lz4_inc_16
	load v1 - v2
	v2 += va
	v1 += vf
	save v1 - v2
	return

: lz4_write_byte
	0xf0 0x00
: lz4_write_pos
	0 0

	save v0 - v0

	i := lz4_write_pos
	jump lz4_inc_16

: lz4_copy_byte
	lz4_read_byte
	jump lz4_write_byte
